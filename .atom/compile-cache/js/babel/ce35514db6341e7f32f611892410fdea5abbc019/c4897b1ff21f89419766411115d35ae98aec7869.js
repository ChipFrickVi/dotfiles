'use babel';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.activate = activate;
exports.deactivate = deactivate;
var disposables = null;
var fontStylesheetDisposable = null;

function activate() {
  var _require = require('atom');

  var CompositeDisposable = _require.CompositeDisposable;

  disposables = new CompositeDisposable();

  // apply fonts when atom is ready
  applyFont();

  // apply fonts when config changes
  // after config changes measurements are already triggered by atom
  disposables.add(atom.config.onDidChange('fonts.fontFamily', applyFont), atom.config.onDidChange('fonts.secondaryFonts', applyFont));

  // give chromium some time to load the fonts
  // then trigger measurements
  setTimeout(triggerMeasurements, 500);

  if (document.querySelector('fonts-fixer') === null) {
    disposables.add(addFixerElement());
  }
}

function deactivate() {
  if (disposables) disposables.dispose();
  if (fontStylesheetDisposable) fontStylesheetDisposable.dispose();
  disposables = null;
  fontStylesheetDisposable = null;
}

function triggerMeasurements() {
  atom.workspace.increaseFontSize();
  atom.workspace.decreaseFontSize();
}

function applyFont() {
  var font = '\'' + atom.config.get('fonts.fontFamily') + '\', ' + atom.config.get('fonts.secondaryFonts');

  // NOTE: since `sourcePath` is specified, there is no need to
  // dispose of fontStylesheetDisposable here, the same style element
  // will be updated, and the newly-returned disposable will be
  // exactly the same functionally as the old one.
  fontStylesheetDisposable = atom.styles.addStyleSheet(':root { --fonts-package-editorfont: ' + font + '; }', {
    sourcePath: 'fonts-package-editorfont'
  });

  triggerMeasurements();
}

function addFixerElement() {
  // create a fixer element that forces chrome to load font styles
  // contains *r*egular, *b*old, *i*talic and i in b
  var fixer = document.createElement('fonts-fixer');
  fixer.innerHTML = 'regular<b>bold<i>italic</i></b><i>italic</i>';
  atom.views.getView(atom.workspace).appendChild(fixer);

  var _require2 = require('atom');

  var Disposable = _require2.Disposable;

  return new Disposable(function () {
    fixer.remove();
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2NoaXBmcmljay8uYXRvbS9wYWNrYWdlcy9mb250cy9saWIvZm9udHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxDQUFBOzs7Ozs7O0FBRVgsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFBO0FBQ3RCLElBQUksd0JBQXdCLEdBQUcsSUFBSSxDQUFBOztBQUU1QixTQUFTLFFBQVEsR0FBRztpQkFDTyxPQUFPLENBQUMsTUFBTSxDQUFDOztNQUF2QyxtQkFBbUIsWUFBbkIsbUJBQW1COztBQUMzQixhQUFXLEdBQUcsSUFBSSxtQkFBbUIsRUFBRSxDQUFBOzs7QUFHdkMsV0FBUyxFQUFFLENBQUE7Ozs7QUFJWCxhQUFXLENBQUMsR0FBRyxDQUNiLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLGtCQUFrQixFQUFFLFNBQVMsQ0FBQyxFQUN0RCxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxzQkFBc0IsRUFBRSxTQUFTLENBQUMsQ0FDM0QsQ0FBQTs7OztBQUlELFlBQVUsQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLENBQUMsQ0FBQTs7QUFFcEMsTUFBSSxRQUFRLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxLQUFLLElBQUksRUFBRTtBQUNsRCxlQUFXLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUE7R0FDbkM7Q0FDRjs7QUFFTSxTQUFTLFVBQVUsR0FBRztBQUMzQixNQUFJLFdBQVcsRUFBRSxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUE7QUFDdEMsTUFBSSx3QkFBd0IsRUFBRSx3QkFBd0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtBQUNoRSxhQUFXLEdBQUcsSUFBSSxDQUFBO0FBQ2xCLDBCQUF3QixHQUFHLElBQUksQ0FBQTtDQUNoQzs7QUFFRCxTQUFTLG1CQUFtQixHQUFHO0FBQzdCLE1BQUksQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQTtBQUNqQyxNQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLENBQUE7Q0FDbEM7O0FBRUQsU0FBUyxTQUFTLEdBQUc7QUFDbkIsTUFBTSxJQUFJLEdBQ1IsT0FBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxZQUN2QyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFBOzs7Ozs7QUFNekMsMEJBQXdCLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLDBDQUNYLElBQUksVUFDM0M7QUFDRSxjQUFVLEVBQUUsMEJBQTBCO0dBQ3ZDLENBQ0YsQ0FBQTs7QUFFRCxxQkFBbUIsRUFBRSxDQUFBO0NBQ3RCOztBQUVELFNBQVMsZUFBZSxHQUFHOzs7QUFHekIsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsQ0FBQTtBQUNuRCxPQUFLLENBQUMsU0FBUyxHQUFHLDhDQUE4QyxDQUFBO0FBQ2hFLE1BQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUE7O2tCQUM5QixPQUFPLENBQUMsTUFBTSxDQUFDOztNQUE5QixVQUFVLGFBQVYsVUFBVTs7QUFDbEIsU0FBTyxJQUFJLFVBQVUsQ0FBQyxZQUFXO0FBQy9CLFNBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQTtHQUNmLENBQUMsQ0FBQTtDQUNIIiwiZmlsZSI6Ii9ob21lL2NoaXBmcmljay8uYXRvbS9wYWNrYWdlcy9mb250cy9saWIvZm9udHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJ1xuXG5sZXQgZGlzcG9zYWJsZXMgPSBudWxsXG5sZXQgZm9udFN0eWxlc2hlZXREaXNwb3NhYmxlID0gbnVsbFxuXG5leHBvcnQgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gIGNvbnN0IHsgQ29tcG9zaXRlRGlzcG9zYWJsZSB9ID0gcmVxdWlyZSgnYXRvbScpXG4gIGRpc3Bvc2FibGVzID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxuXG4gIC8vIGFwcGx5IGZvbnRzIHdoZW4gYXRvbSBpcyByZWFkeVxuICBhcHBseUZvbnQoKVxuXG4gIC8vIGFwcGx5IGZvbnRzIHdoZW4gY29uZmlnIGNoYW5nZXNcbiAgLy8gYWZ0ZXIgY29uZmlnIGNoYW5nZXMgbWVhc3VyZW1lbnRzIGFyZSBhbHJlYWR5IHRyaWdnZXJlZCBieSBhdG9tXG4gIGRpc3Bvc2FibGVzLmFkZChcbiAgICBhdG9tLmNvbmZpZy5vbkRpZENoYW5nZSgnZm9udHMuZm9udEZhbWlseScsIGFwcGx5Rm9udCksXG4gICAgYXRvbS5jb25maWcub25EaWRDaGFuZ2UoJ2ZvbnRzLnNlY29uZGFyeUZvbnRzJywgYXBwbHlGb250KSxcbiAgKVxuXG4gIC8vIGdpdmUgY2hyb21pdW0gc29tZSB0aW1lIHRvIGxvYWQgdGhlIGZvbnRzXG4gIC8vIHRoZW4gdHJpZ2dlciBtZWFzdXJlbWVudHNcbiAgc2V0VGltZW91dCh0cmlnZ2VyTWVhc3VyZW1lbnRzLCA1MDApXG5cbiAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2ZvbnRzLWZpeGVyJykgPT09IG51bGwpIHtcbiAgICBkaXNwb3NhYmxlcy5hZGQoYWRkRml4ZXJFbGVtZW50KCkpXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlYWN0aXZhdGUoKSB7XG4gIGlmIChkaXNwb3NhYmxlcykgZGlzcG9zYWJsZXMuZGlzcG9zZSgpXG4gIGlmIChmb250U3R5bGVzaGVldERpc3Bvc2FibGUpIGZvbnRTdHlsZXNoZWV0RGlzcG9zYWJsZS5kaXNwb3NlKClcbiAgZGlzcG9zYWJsZXMgPSBudWxsXG4gIGZvbnRTdHlsZXNoZWV0RGlzcG9zYWJsZSA9IG51bGxcbn1cblxuZnVuY3Rpb24gdHJpZ2dlck1lYXN1cmVtZW50cygpIHtcbiAgYXRvbS53b3Jrc3BhY2UuaW5jcmVhc2VGb250U2l6ZSgpXG4gIGF0b20ud29ya3NwYWNlLmRlY3JlYXNlRm9udFNpemUoKVxufVxuXG5mdW5jdGlvbiBhcHBseUZvbnQoKSB7XG4gIGNvbnN0IGZvbnQgPVxuICAgIGAnJHthdG9tLmNvbmZpZy5nZXQoJ2ZvbnRzLmZvbnRGYW1pbHknKX0nLCBgICtcbiAgICBhdG9tLmNvbmZpZy5nZXQoJ2ZvbnRzLnNlY29uZGFyeUZvbnRzJylcblxuICAvLyBOT1RFOiBzaW5jZSBgc291cmNlUGF0aGAgaXMgc3BlY2lmaWVkLCB0aGVyZSBpcyBubyBuZWVkIHRvXG4gIC8vIGRpc3Bvc2Ugb2YgZm9udFN0eWxlc2hlZXREaXNwb3NhYmxlIGhlcmUsIHRoZSBzYW1lIHN0eWxlIGVsZW1lbnRcbiAgLy8gd2lsbCBiZSB1cGRhdGVkLCBhbmQgdGhlIG5ld2x5LXJldHVybmVkIGRpc3Bvc2FibGUgd2lsbCBiZVxuICAvLyBleGFjdGx5IHRoZSBzYW1lIGZ1bmN0aW9uYWxseSBhcyB0aGUgb2xkIG9uZS5cbiAgZm9udFN0eWxlc2hlZXREaXNwb3NhYmxlID0gYXRvbS5zdHlsZXMuYWRkU3R5bGVTaGVldChcbiAgICBgOnJvb3QgeyAtLWZvbnRzLXBhY2thZ2UtZWRpdG9yZm9udDogJHtmb250fTsgfWAsXG4gICAge1xuICAgICAgc291cmNlUGF0aDogJ2ZvbnRzLXBhY2thZ2UtZWRpdG9yZm9udCdcbiAgICB9LFxuICApXG5cbiAgdHJpZ2dlck1lYXN1cmVtZW50cygpXG59XG5cbmZ1bmN0aW9uIGFkZEZpeGVyRWxlbWVudCgpIHtcbiAgLy8gY3JlYXRlIGEgZml4ZXIgZWxlbWVudCB0aGF0IGZvcmNlcyBjaHJvbWUgdG8gbG9hZCBmb250IHN0eWxlc1xuICAvLyBjb250YWlucyAqciplZ3VsYXIsICpiKm9sZCwgKmkqdGFsaWMgYW5kIGkgaW4gYlxuICBjb25zdCBmaXhlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ZvbnRzLWZpeGVyJylcbiAgZml4ZXIuaW5uZXJIVE1MID0gJ3JlZ3VsYXI8Yj5ib2xkPGk+aXRhbGljPC9pPjwvYj48aT5pdGFsaWM8L2k+J1xuICBhdG9tLnZpZXdzLmdldFZpZXcoYXRvbS53b3Jrc3BhY2UpLmFwcGVuZENoaWxkKGZpeGVyKVxuICBjb25zdCB7IERpc3Bvc2FibGUgfSA9IHJlcXVpcmUoJ2F0b20nKVxuICByZXR1cm4gbmV3IERpc3Bvc2FibGUoZnVuY3Rpb24oKSB7XG4gICAgZml4ZXIucmVtb3ZlKClcbiAgfSlcbn1cbiJdfQ==